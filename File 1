function isPermutation(str1, str2) {
    var check_string = true; // Initially set to true as required

    // If str1 is longer than str2, then it's impossible for str1's permutation to be in str2
    if (str1.length > str2.length) {
        check_string = false;
        return check_string;
    }

    // Initialize frequency arrays for characters 'a' to 'z'
    const s1Count = new Array(26).fill(0);
    const s2Count = new Array(26).fill(0);
    const aCharCode = 'a'.charCodeAt(0);

    // Count character frequencies in str1 and the first window of str2
    for (let i = 0; i < str1.length; i++) {
        s1Count[str1.charCodeAt(i) - aCharCode]++;
        s2Count[str2.charCodeAt(i) - aCharCode]++;
    }

    // Function to compare two frequency arrays
    function arraysMatch(arr1, arr2) {
        for (let i = 0; i < 26; i++) {
            if (arr1[i] !== arr2[i]) return false;
        }
        return true;
    }

    // Check if the initial window matches
    if (arraysMatch(s1Count, s2Count)) {
        return check_string; // Return true if a permutation is found in the first window
    }

    // Slide the window across str2
    for (let i = str1.length; i < str2.length; i++) {
        // Include the next character in the window
        s2Count[str2.charCodeAt(i) - aCharCode]++;
        // Remove the first character of the previous window
        s2Count[str2.charCodeAt(i - str1.length) - aCharCode]--;
        
        // Check if the updated window matches
        if (arraysMatch(s1Count, s2Count)) {
            return check_string; // Return true if a permutation is found
        }
    }

    // If no permutation was found, update check_string to false
    check_string = false;
    return check_string;
}

// Example usage:
console.log("check_string =", isPermutation("qwa", "wqawsdfgt")); // Output: check_string = true
console.log("check_string =", isPermutation("qwd", "wdfijewjewewswf")); // Output: check_string = false
